name: CI

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - master

jobs:
  kubernetes:
    name: Kubernetes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s: [v1.12.10, v1.14.10, v1.16.9, v1.18.4]
    steps:
      - uses: actions/checkout@v1

      - name: Prepare git
        env:
          GITHUB_USER: 1gtm
          GITHUB_TOKEN: ${{ secrets.LGTM_GITHUB_TOKEN }}
        run: |
          git config --global user.name "${GITHUB_USER}"
          git config --global user.email "${GITHUB_USER}@appscode.com"
          git remote set-url origin https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

      - name: Check out operator
        id: checkout_operator
        run: |
          set -x
          git show -s --format=%s
          IFS='@'
          read -ra PR <<< $(git show -s --format=%s)
          echo "${PR[@]}"
          cd ..
          git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@${PR[0]}.git
          cd $(basename ${PR[0]})
          git checkout ${PR[1]}
          echo ::set-output name=pr_repo::${PR[0]}
          echo ::set-output name=pr_workspace::${RUNNER_WORKSPACE}/$(basename ${PR[0]})
          echo ::set-output name=pr_sha::${PR[1]}

      - name: Available platforms
        run: |
          echo ${{ steps.checkout_operator.outputs.pr_repo }}
          echo ${{ steps.checkout_operator.outputs.pr_workspace }}
          echo ${{ steps.checkout_operator.outputs.pr_sha }}

      # - name: Create Kubernetes ${{ matrix.k8s }} cluster
      #   id: kind
      #   uses: engineerd/setup-kind@v0.3.0
      #   with:
      #     version: v0.8.1
      #     config: hack/kubernetes/kind.yaml
      #     image: kindest/node:${{ matrix.k8s }}

      # - name: Prepare cluster for testing
      #   id: local-path
      #   env:
      #     DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      #     USERNAME: 1gtm
      #     REGISTRY_SECRET: regcred
      #   run: |
      #     echo "waiting for nodes to be ready ..."
      #     kubectl wait --for=condition=Ready nodes --all --timeout=5m
      #     kubectl get nodes
      #     echo
      #     kubectl version
      #     echo
      #     echo "install helm 3"
      #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      #     echo
      #     echo "create docker-registry secret"
      #     kubectl create secret docker-registry ${REGISTRY_SECRET} --namespace=kube-system --docker-server=https://index.docker.io/v1/ --docker-username=${USERNAME} --docker-password=${DOCKER_TOKEN}

      # - name: Check out installer
      #   id: checkout_install
      #   run: |
      #     cd ..
      #     git clone https://github.com/searchlight/installer.git
      #     cd installer
      #     git checkout master

      # - name: Check out operator
      #   id: checkout_operator
      #   run: |
      #     IFS='@'
      #     read -ra PR <<< $(git show -s --format=%s)
      #     echo "${PR[@]}"
      #     cd ..
      #     git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@${PR[0]}.git
      #     cd $(basename ${PR[0]})
      #     git checkout ${PR[1]}
      #     echo ::set-output name=pr_repo::${PR[0]}
      #     echo ::set-output name=pr_workspace::${RUNNER_WORKSPACE}/$(basename ${PR[0]})
      #     echo ::set-output name=pr_sha::${PR[1]}

      # - name: Available platforms
      #   run: |
      #     echo ${{ steps.checkout_operator.outputs.pr_repo }}
      #     echo ${{ steps.checkout_operator.outputs.pr_workspace }}
      #     echo ${{ steps.checkout_operator.outputs.pr_sha }}

      # - name: Run e2e tests
      #   env:
      #     REGISTRY: appscodeci
      #     REGISTRY_SECRET: regcred
      #     TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
      #     GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
      #   run: |
      #     cd ${{ steps.checkout_operator.outputs.pr_sha }}
      #     ls -l
      #     echo "preparing test credentials"
      #     mkdir -p hack/config
      #     echo -n "$TEST_CREDENTIALS" > hack/config/.env
      #     echo >> hack/config/.env
      #     echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
      #     make install || ( kubectl describe deployment -n kube-system grafana-operator; kubectl logs -n kube-system deployment/grafana-operator; exit 1; )
      #     echo
      #     make e2e-tests
